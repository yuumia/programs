
#include <bits/stdc++.h> 
using namespace std; 

// Numerp de vertices en el grafo 
#define V 5 


int minKey(int key[], bool mstSet[]) 
{ 
	int min = INT_MAX, min_index; 
	for (int v = 0; v < V; v++) 
		if (mstSet[v] == false && key[v] < min) 
			min = key[v], min_index = v; 
	return min_index; 
} 

// funcion que imprime  MST
void printMST(int parent[], int graph[V][V]) 
{ 
	cout<<"Edge \tWeight\n"; 
	for (int i = 1; i < V; i++) 
		cout<<parent[i]<<" - "<<i<<" \t"<<graph[i][parent[i]]<<" \n"; 
} 

// Función para construir e imprimir MST para
// un gráfico representado usando adyacencia
// de representación matricial
void primMST(int graph[V][V]) 
{ 
	// guarda el construido MST 
	int parent[V]; 
	
	// Valores Key usados para elegir el borde de peso mínimo en el corte
	int key[V]; 
	
	// representa el numero de vertices no incluidos e MST
	bool mstSet[V]; 

	// INCIALIZA LAS LLAVES COMO IFINITAS
	for (int i = 0; i < V; i++) 
		key[i] = INT_MAX, mstSet[i] = false; 

	// Incluye siempre el primer primer vértice en MST. Hace la clave 0 para que este vértice se elija como primer vértice. 
	key[0] = 0; 
	parent[0] = -1; // First node is always root of MST 

	// MST tendra V numero de vertices 
	for (int count = 0; count < V - 1; count++) 
	{ 
		// Elija el vértice clave mínimo del conjunto de vértices aún no incluidos en MST
		int u = minKey(key, mstSet); 

		// Agregue el vértice seleccionado al conjunto MST 
		mstSet[u] = true; 

		// Actualice el valor clave y el índice primario de los vértices adyacentes del vértice seleccionado.
    // Considere solo aquellos vértices que aún no están incluidos en MST
		for (int v = 0; v < V; v++) 

			// El gráfico [u] [v] no es cero solo para vértices adyacentes de m mst El conjunto [v] es falso para vértices aún
      // no incluidos en MST.Actualice la clave solo si el gráfico [u] [v] es más pequeño que la clave [v], el gráfico [u] 
      // [v] no es cero solo para vértices adyacentes de m mstSet [v] es falso para vértices aún no incluidos en MST
      // Actualice la clave solo si el gráfico [u] [v] es más pequeño que la clave [v]
			// if (graph[u][v] && mstSet[v] == false && graph[u][v] < key[v]) 
				parent[v] = u, key[v] = graph[u][v]; 
	} 
	printMST(parent, graph); 
} 
int main() 
{ 
	/* vamos a crear el grafo
		2 3 
	(0)--(1)--(2) 
	| / \ | 
	6| 8/ \5 |7 
	| / \ | 
	(3)-------(4) 
			9	 */
	int graph[V][V] = { { 0, 2, 0, 6, 0 }, 
						{ 2, 0, 3, 8, 5 }, 
						{ 0, 3, 0, 0, 7 }, 
						{ 6, 8, 0, 0, 9 }, 
						{ 0, 5, 7, 9, 0 } }; 

	// Print the solution 
	primMST(graph); 

	return 0; 
} 
